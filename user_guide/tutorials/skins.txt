|---------------------------------------------------------------
| TUTORIAL #1: ANATOMY OF A SKIN
|---------------------------------------------------------------

Skins in SMS underwent little change from version to version; even moving from SMS 1 to SMS 2 didn't bring a lot of skin changes. In Nova though, we've taken a radically different approaching to skins that will skin developers more control than ever before to customize their skins without the risk of touching core application files and causing headaches through non-destructive editing of those core files, or as we've begun to call it, seamless substitution. Let's take a look at a Nova, examine each component a little closer, talk about where pieces come from and drill further down into skins a little more.

THE VIEWS DIRECTORY

Before we start, it's important to understand that a skin is a collection of sections. The sections are what actually do all the heavy lifting. We'll be using Nova's default skin when we're talking about skins here.

_BASE

In SMS, all the skins were organized into a skins folder; in Nova, all the presentation files are found in the views directory (this was a necessary change because of the CodeIgniter core and cannot be changed).

Before we event get in to talking about skins, it's important to understand the components that build a skin in Nova as they're the keys to how seamless substitution works. The first directory you'll see is _base and is where every view file, Javascript view file, icon and other images not specific to the skin section (we'll get in to that later) are found. The _base directory is the third and final place Nova looks for view files, images and Javascript view files in the seamless substition process because _base will always contain all the presentation files for Nova pages.

Because of the fact that _base contains all the presentation files for Nova, it could be tempting to just edit a file in _base and watch it change throughout the entire system. Not only does Anodyne strong discourage this, but we've come up with an easy-to-use process for changing core application files without touching the core application files called seamless substitution. When there's a change to a view file, Anodyne will always make it in _base and never touch anything else when it comes to presentation files. So as a skin developer, how would you change a view, Javascript view or image throughout the entire system?

_BASE_OVERRIDE

Welcome to the _base_override directory, the second second stop in the seamless substitution process. Before Nova checks the _base directory for presentation files, it'll check _base_override and if it finds the file, it'll use it instead of the _base version. This allows admins to change a view, Javascript view or image in one place and have it changed across the entire system. The _base_override file structure is identical to the file structure of skin. We think the _base_override is a good compromise to give admins control while still maintaining our desire to keep core application files unchanged to help admins and skin developers avoid the heartache of losing their work because Anodyne updates a _base presentation file.

SKIN DIRECTORIES

The first place Nova looks in the seamless substitution process are the skin directories. Nova will always give preference to skin directories for seamless substitution, even if you put something in _base_override. If the file being replaced exists in all 3 locations, the skin will get preference.

Skin directories consists of template files and matching directories (plus an index.html which we recommend you put in every fold to prevent people from looking at your file listing, a potential security risk). At the very least, a skin needs one template file and one directory. This approach allows a skin developer to create a skin that just has a login section while someone else creates a skin that has a main section and admin section. This gives skin developers more flexibility than before. The default skin has four template files (main, admin, wiki and login) and four matching directories.

If we drill down into the main directory, there are four more directories: css, js, images and pages (plus an index.html file). These directories are pretty self-explanatory and will contain the CSS files, Javascript files, images and pages for a skin section. This directory structure is maintained is both _base and _base_override (neither contain the CSS directory though).

CSS

The CSS directory contains all of the stylesheets your skin section will use. For the default skin, we've chosen to break them up into different files. You don't have to do that for your skin. You can leave them in one or break them up even further. When you start your own skin, it's always a good idea to start with the default skin as that has everything you'll need, including stylesheets for the jQuery UI tabs and other classes used extensively throughout Nova.

JS

The JS directory contains all of the Javascript view files the system uses. The default skin doesn't have anything in this folder because we choose to use the system defaults found in the _base directory. If you wanted to change the Javascript behavior or add to it, you would simply copy the file from _base and put it into your skin section's JS directory (or _base_override if you want to override for the entire system) and make any changes you want. In order for seamless substitution to work, the JS file has be named identically to the file in _base!

IMAGES

The skin's images folder serves two purposes. First, it can contain any icons found in the _base directory in the event you want change the default icons used by the system. In addition, any skin-specific image files, like background images and other skin images and components, would be put in the skin's images directory. In order for seamless substitution to work, the image file has be named identically to the file in _base!

PAGES

The skin's pages folder holds the guts of the system. All view pages are found in _base, but using seamless substitution, you can copy and paste the view file from _base to your skin (or _base_override), make any changes you want and the system will use the version in your skin or _base_override before using the _base version. This is a great tool if you want to add images to your pages or make any other changes as it'll ensure that even when Nova gets updated, your changes stay intact through the update. In order for seamless substitution to work, the page file has be named identically to the file in _base!

SEAMLESS SUBSTITUTION DISCLAIMER

We've designed seamless substitution to give the admins and skin developers as much control as possible, but that comes at a price. In the event that Nova updates a _base view or changes something in the controller, your changes may break the page. We considered putting versioning into the view files, but that would've required a skin developer to change their view files every time an update comes out. To make things simple, we don't touch your view files, so it'll be the admin/developer's responsibility to make sure that an update doesn't break their skins.

|---------------------------------------------------------------
| TUTORIAL #2: ANATOMY OF A TEMPLATE FILE
|---------------------------------------------------------------

So we've seen what goes in to a skin. Let's take a closer look at one of those components (and arguably the most important): the template file.

In Nova, templates are a single file unlike SMS where you had at the very least 2, sometimes 3 or 4 files. Nova simplifies the template file by bringing everything into a single file and removing as much excess code as possible. That means that minus some code above the HTML, the file is almost entirely HTML. It's easy to create an HTML template and convert it to a Nova section (we'll do just that in other tutorials). For reference here, let's open up the default skin's main template file: template_main.php.

After the block of comments, you'll notice a few lines of PHP code:

$sec = 'main'; /* set the section of the system */
$css = 'main.css'; /* the name of the main css file */

These are pretty self-explanatory. The first, sets the section, or section, of the skin. In this case, it's main. If you were creating an admin section, you'd change the $sec variable from main to admin. The second sets the name of the main stylesheet. You can change this to be whatever you want based on what you've named your files. None of the PHP after that should be changed. In a nutshell, the PHP makes sure that we have the right path to the skin and we set up the variable used to set where the stylesheet comes from.

Where we want to focus our attention now is the HTML of the template file. It starts off just like standard HTML document. You'll notice in the head we have our standard title tag, but this time, with a little twist:

<title><?php echo $title;?></title>

The PHP code in the title tags is called a region. Regions are defined in the template config file and should never be changed since Nova relies on knowing exactly what regions exist for which sections. All we're doing here is printing out whatever's been passed to the title region. (If you've gone through the extending tutorials, you'll remember that we set the title region in our controller.) Next up, we have our meta tags:

<meta name="description" content="<?php echo $this->config->item('meta_desc');?>" />
<meta name="author" content="<?php echo $this->config->item('meta_author');?>" />
<meta name="keywords" content="<?php echo $this->config->item('meta_keywords');?>" />
<?php echo $_redirect;?>

There's some more PHP code in here that pulls the meta values from the config file. If you want to change the meta data for Nova, you can do so from the config files. This ensures that every skin has their meta data changed at the same time (assuming every skin has these tags, which they should). Finally, the $_redirect variable is used by Nova to build redirecting into the system in as easy a way as possible. Continuing down through the head, we see our next block of code:

<!-- STYLESHEETS -->
<?php echo link_tag($link); ?>

<!-- JAVASCRIPT FILES -->
<?php include_once($this->config->item('include_head_main')); ?>

<?php echo $javascript;?>

Pretty self-explanatory here too. The first prints out the main stylesheet using CodeIgniter's link_tag helper. This allows us to pass an array to the function and CodeIgniter will build the tag for us. Next, we're including the main head include file which provides us with the necessary Javascript pieces used by Nova. Each section has their own include file. You need to make sure these lines are in all your template files! Finally, we have a region for Javascript which allows us to write Javascript code to the template from our controllers (more on this in a later tutorial).

So let's turn our attention now to the header.

<!-- HEAD -->
<div id="head">
	<div class="head_top"></div>
	<div class="wrapper">
		<div class="head_content">
			<?php echo img(APPFOLDER .'/views/'. $current_skin .'/'. $sec .'/images/head_logo.png', FALSE);?>
		</div>
	</div>
</div>

Nothing too crazy here. We're using CodeIgniter's image helper to build the image tag for us, but besides that, it's all straight HTML.

<!-- MENU -->
<div id="menu">
	<div class="wrapper">
		<div class="nav-main">
			<?php echo $nav_main;?>
		</div>
	</div>
</div>

Here's where regions come in really handy. In SMS, when it came to building the menus, there was a good chunk of code involved. We've managed to move that code right out of the template now though. As you can see here, it's HTML save for a single PHP variable called $nav_main. That region tells Nova where to put the main menu. We fill that data in our controllers, this just tells Nova where to put it. When creating your own template files, all you need to do is put <?php echo $nav_main;?> wherever you want the main menu. It's that easy!

<!-- BODY -->
<div id="body">
	<div class="wrapper">
		<!-- SUB NAVIGATION -->
		<div class="nav-sub">
			<?php echo $nav_sub;?>
		</div>
		
		<!-- PAGE CONTENT -->
		<div class="content">
			<?php echo $flash_message;?>
			<?php echo $content;?>
			<?php echo $ajax;?>
		</div>
	</div>
</div>

That right there is the entire body of Nova. You can see we have a sub navigation region that will tell the system where to render the sub navigation. After that, we have our flash message region, our content and our AJAX region. After that, we're done. We can move these things around our template files and Nova will put the components where we tell it to.

When it comes to template files, you really have a lot of freedom. Want to use a table-based layout to do something akin to SMS 1? No problem, just create your HTML and drop the regions and PHP code in. Want to create a new template that uses no tables? No problem, just create your HTML and drop the regions and PHP code in and you're all set.

As you can see, Nova provides a lot more flexibility when it comes to templates and should make things easier to understand and grasp overall. Next up, we'll talk about what goes in to the section directory and Seamless Substitution!

|---------------------------------------------------------------
| TUTORIAL #3: ANATOMY OF A SKIN SECTION
|---------------------------------------------------------------

We've looked at what goes in to a skin and what makes up a template file, so let's drill further down into the section directory to find out what makes up the heart and soul of a section!

Inside the section directory, we have 4 folders: css, images, js and pages. These make up the core components of a section and are all pretty self-explanatory, but let's go folder by folder and look at what's involved with each.

CSS
==========

The css directory is for, obviously, storing cascading stylesheets. You can have as many or as few stylesheets as you want. In the default skin's main section, we break the stylesheets out to things like display, text, forms, tabs, reset and panel. Each stylesheet does it's own thing, but what they all have in common is that the main.css stylesheet imports them for use by Nova.

@import url('reset.css');
@import url('display.css');
@import url('forms.css');
@import url('text.css');
@import url('ui.tabs.css');
@import url('panel.css');

With this block of code, we've pulled all the stylesheets in and once the main.css stylesheet is loaded by our template file, we have access to everything inside these stylesheets. Observant skin developers probably noticed in the last tutorial that we only pulled in one stylesheet, and the reason we do that is because everything else is imported by the main stylesheet. Included in this list is a reset stylehsheet. You don't have to use a reset stylesheet, but we've found it invaluable in making sure that all browsers start at the same place. It lets us eliminate some of the browser-specific issues we tend to run in to when developing sections.

While we have developed our section a certain way and with certain classes, you're under no obligations to use the same. In fact, with Seamless Substitution, you could, in theory, completely redo nearly every part of a section with your own classes names. Of course, a undertaking like that would take some time, but it is possible.

IMAGES
==========

The images directory is for, obviously, storing our images. A section's images folder can be used for both background images for the section itself as well as storing replacement images that are used elsewhere in the system. Seamless substitution will be described in the next tutorial, but for now, just know that Nova will look in your skin's section first to find out if there are images that should be replaced.

JAVASCRIPT
==========

The js directory is for, obviously, storing Javascript view files. In Nova, we've managed to separate the Javascript from the actual view files in the event that someone wants to rewrite part of, or all, of the system's Javascript. This can come in handy in the event that someone, for whatever reason, wanted to change Nova from using jQuery to Prototype or any other Javascript framework. In addition, the Javascript view files can be edited to allow for more Javascript functionality. Like images, Nova will look in your skin's section first to find out if there are Javascript view files that should be used in Nova instead of the base files.

PAGES
==========

The pages directory is for storing view files that Nova uses. Like images and Javascript, Nova checks your skin's section to find out if there are any view files it should use instead of the base ones. View files are almost entirely HTML, though there is some basic PHP scattered throughout. We've decided to use PHP's alternate syntax for control structures (if, elseif, else, switch, for, foreach, while, etc.) to make it easier for non-PHP coders to work with the PHP code. This is the only place in the system where the alternate syntax should be used.

That, in a nutshell, is the anatomy of a section. In the next tutorial, we'll take a close look at seamless substitution and explain what it means to skin developers.

|---------------------------------------------------------------
| TUTORIAL #4: INSIDE SEAMLESS SUBSTITUTION
|---------------------------------------------------------------

A term that's been thrown around over the last few months when talking about skinning in Nova is SEAMLESS SUBSTITUTION. There have been some vague descriptions of what seamless substitution is, but not a detailed look at one of the biggest features for skin developers in Nova. So, let's take a step back and look in to what exactly seamless substitution is and why it's such a big deal!

In SMS, it never failed that someone would want to edit a core application file to get a desired effect. With SMS having open source code, admins were free to make the changes to the source code themselves, but the problem became that the next SMS update would wipe out those changes if we updated that page. There was nothing that could be done about it either; the admin was just plain out of luck. When we sat down to start planning Nova, this was a major issue we wanted to address. The answer we came up with is Seamless Substitution.

We've already talked about the anatomy of a skin, but the views folder contains some important stuff too. On top of all the skins, the views directory also contains the _base and _base_override directories; this is where seamless substitution comes in to play.

The _base directory contains all the default views, javascript files and images used by Nova. This folder acts as the central repository for all non-skin related assets. Each skin has folders for admin, main, login and wiki; _base does as well (though the _base folder doesn't contain a CSS directory for the 4 sections). In addition, elements that aren't skinnable are in _base as well. In addition to admin, main, login and wiki, _base contains install, update, ajax and emails. The 4 additional directories do include CSS folders.

The _base_override contains directories for the admin, main, login and wiki sections. We'll get in to the exact purpose of the override directory shortly, but for now, just know that it exists and is part of the seamless substitution workflow.

Seamless substitution starts in the application controllers with one of 3 location helpers: view_location, js_location and img_location. Each of these helpers follows the same basic workflow to determine where the views, javascript files and images should be pulled from. Let's focus on the view_location helper to illustrate this point. In our controller, we would have the following code:

$view_loc = view_location('main_index', $this->skin, 'main');

That variable is then put into our template code to write the content region, but all the variable contains by that time is a string of text that describes the path Nova should use for where to pull the view file from. The workflow view_location is pretty straightforward. You'll remember that every section has a pages directory in it that, by default, is empty. The first thing Nova does is looks in the skin currently being used and drills down to the section. In our example, we're looking for main_index.php in the current skin's main section. Once there, it checks the pages directory for a file called main_index.php. If Nova finds that the file is there, the process ends and Nova uses that file. More often than not though, it won't find it and will continue on to the next step.

It dawned on us as we were developing Nova that you may want to change the manifest layout for your skin, but then, there are other pages where you may want to change it for the whole site. The way seamless substitution worked before, you would have to put that file in every skin as well as remember to put it in any new skins you add. That's a lot of work and remember and we wanted this to be as simple a process as possible, so we came up with the override idea. That brings us to step 2 of seamless substitution.

If Nova didn't find the view file we told it to look for in the skin's section's pages folder, then it goes up to _base_override and search's the section's pages folder for that file. If it finds it, it uses it. If it doesn't find it, it moves on to the last step. This 2nd step allows an admin to change an image or page for the entire system without touching every single skin. This also has the added benefit of giving people another place to put stuff that isn't _base. Want to create a new page? The override is the perfect place to put it! Anodyne really doesn't want people messing around with _base because if we change something in there, we don't want you to lose your changes. Hence, the override, which will remain intact through an update (assuming you haven't overwritten the entire views directory).

So Nova has gotten through the skin and the _base_override directories and still hasn't found what it's looking for, where to next? After that, it's time to look in _base. Odds are, Nova's going to find what it's looking for in _base and will use it. So just like that, with a line of code, Nova is adding a whole new level of flexibility for skin developers. So how do you use seamless substitution?

Using it is even easier than the line of code. All you have to do is create a file in your skin's section's pages directory (or the override directory) with the same name as the one you want to replace. (The best way to go about it is to copy the file from _base and paste it into either your skin or the override directory and then edit it from there.) The only catch is that the file has to be named identically or it won't work. (Also a good tip if your page isn't working and you want to revert back to the system default but don't want to delete your work, just rename the file to something different.) As you've seen already, Nova just knows what to do from there.

What's even better? The same process works for images and javascript files! Want to use some different icons for your skin? Throw the icons in your skin's section's images folder with the same names and Nova uses those. Want to use a different icon for the RSS icon throughout the entire application? Throw the new icon in the override's section's images folder and Nova uses it!

Seamless substitution is a powerful tool available to skin developers that will help them easily make changes to the Nova core without ever touching it!